use std::fs;
use std::collections::HashMap;

const PATHS: [[([usize; 11], usize); 23]; 22] =
[
// 0 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],    1), // 1
        ([0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0],    3), // 2
        ([0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0],    5), // 3
        ([0, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0],    7), // 4
        ([0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0],    9), // 5
        ([0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0],    10),// 6
        ([0, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0],    3), // 7
        ([0, 1, 2, 8, 0, 0, 0, 0, 0, 0, 0],    5), // 8
        ([0, 1, 2, 3, 9, 0, 0, 0, 0, 0, 0],    7), // 9
        ([0, 1, 2, 3, 4, 10, 0, 0, 0, 0, 0],   9), //10
        ([0, 1, 7, 11, 0, 0, 0, 0, 0, 0, 0],   4), //11
        ([0, 1, 2, 8, 12, 0, 0, 0, 0, 0, 0],   6), //12
        ([0, 1, 2, 3, 9, 13, 0, 0, 0, 0, 0],   8), //13
        ([0, 1, 2, 3, 4, 10, 14, 0, 0, 0, 0],  10),//14
        ([0, 1, 7, 11, 15, 0, 0, 0, 0, 0, 0],   5), //15
        ([0, 1, 2, 8, 12, 16, 0, 0, 0, 0, 0],   7), //16
        ([0, 1, 2, 3, 9, 13, 17, 0, 0, 0, 0],   9), //17
        ([0, 1, 2, 3, 4, 10, 14, 18, 0, 0, 0],  11),//18
        ([0, 1, 7, 11, 15, 19, 0, 0, 0, 0, 0],   6), //19
        ([0, 1, 2, 8, 12, 16, 20, 0, 0, 0, 0],   8), //20
        ([0, 1, 2, 3, 9, 13, 17, 21, 0, 0, 0],   10), //21
        ([0, 1, 2, 3, 4, 10, 14, 18, 22, 0, 0],  12),//22
  ],
// 1 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 2
        ([1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 3
        ([1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0],    6), // 4
        ([1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0],    8), // 5
        ([1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0],    9), // 6
        ([1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 7
        ([1, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 8
        ([1, 2, 3, 9, 0, 0, 0, 0, 0, 0, 0],    6), // 9
        ([1, 2, 3, 4, 10, 0, 0, 0, 0, 0, 0],   8), //10
        ([1, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0],   3), //11
        ([1, 2, 8, 12, 0, 0, 0, 0, 0, 0, 0],   5), //12
        ([1, 2, 3, 9, 13, 0, 0, 0, 0, 0, 0],   7), //13
        ([1, 2, 3, 4, 10, 14, 0, 0, 0, 0, 0],  9), //14
        ([1, 7, 11, 15, 0, 0, 0, 0, 0, 0, 0],   4), //15
        ([1, 2, 8, 12, 16, 0, 0, 0, 0, 0, 0],   6), //16
        ([1, 2, 3, 9, 13, 17, 0, 0, 0, 0, 0],   8), //17
        ([1, 2, 3, 4, 10, 14, 18, 0, 0, 0, 0],  10), //18
        ([1, 7, 11, 15, 19, 0, 0, 0, 0, 0, 0],   5), //19
        ([1, 2, 8, 12, 16, 20, 0, 0, 0, 0, 0],   7), //20
        ([1, 2, 3, 9, 13, 17, 21, 0, 0, 0, 0],   9), //21
        ([1, 2, 3, 4, 10, 14, 18, 22, 0, 0, 0],  11), //22
  ],
// 2 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 3
        ([2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 4
        ([2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0],    6), // 5
        ([2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0],    7), // 6
        ([2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 7
        ([2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 8
        ([2, 3, 9, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 9
        ([2, 3, 4, 10, 0, 0, 0, 0, 0, 0, 0],   6), //10
        ([2, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0],   3), //11
        ([2, 8, 12, 0, 0, 0, 0, 0, 0, 0, 0],   3), //12
        ([2, 3, 9, 13, 0, 0, 0, 0, 0, 0, 0],   5), //13
        ([2, 3, 4, 10, 14, 0, 0, 0, 0, 0, 0],  7), //14
        ([2, 7, 11, 15, 0, 0, 0, 0, 0, 0, 0],   4), //15
        ([2, 8, 12, 16, 0, 0, 0, 0, 0, 0, 0],   4), //16
        ([2, 3, 9, 13, 17, 0, 0, 0, 0, 0, 0],   6), //17
        ([2, 3, 4, 10, 14, 18, 0, 0, 0, 0, 0],  8), //18
        ([2, 7, 11, 15, 19, 0, 0, 0, 0, 0, 0],   5), //19
        ([2, 8, 12, 16, 20, 0, 0, 0, 0, 0, 0],   5), //20
        ([2, 3, 9, 13, 17, 21, 0, 0, 0, 0, 0],   7), //21
        ([2, 3, 4, 10, 14, 18, 22, 0, 0, 0, 0],  9), //22
  ],
// 3 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 3
        ([3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 4
        ([3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 5
        ([3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0],    5), // 6
        ([3, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 7
        ([3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 8
        ([3, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 9
        ([3, 4, 10, 0, 0, 0, 0, 0, 0, 0, 0],   4), //10
        ([3, 2, 7, 11, 0, 0, 0, 0, 0, 0, 0],   5), //11
        ([3, 8, 12, 0, 0, 0, 0, 0, 0, 0, 0],   3), //12
        ([3, 9, 13, 0, 0, 0, 0, 0, 0, 0, 0],   3), //13
        ([3, 4, 10, 14, 0, 0, 0, 0, 0, 0, 0],  5), //14
        ([3, 2, 7, 11, 15, 0, 0, 0, 0, 0, 0],   6), //15
        ([3, 8, 12, 16, 0, 0, 0, 0, 0, 0, 0],   4), //16
        ([3, 9, 13, 17, 0, 0, 0, 0, 0, 0, 0],   4), //17
        ([3, 4, 10, 14, 18, 0, 0, 0, 0, 0, 0],  6), //18
        ([3, 2, 7, 11, 15, 19, 0, 0, 0, 0, 0],   7), //19
        ([3, 8, 12, 16, 20, 0, 0, 0, 0, 0, 0],   5), //20
        ([3, 9, 13, 17, 21, 0, 0, 0, 0, 0, 0],   5), //21
        ([3, 4, 10, 14, 18, 22, 0, 0, 0, 0, 0],  7), //22
  ],
// 4 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 4
        ([4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 5
        ([4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0],    3), // 6
        ([4, 3, 2, 7, 0, 0, 0, 0, 0, 0, 0],    6), // 7
        ([4, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 8
        ([4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],    2), // 9
        ([4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0],   2), //10
        ([4, 3, 2, 7, 11, 0, 0, 0, 0, 0, 0],   7), //11
        ([4, 3, 8, 12, 0, 0, 0, 0, 0, 0, 0],   5), //12
        ([4, 9, 13, 0, 0, 0, 0, 0, 0, 0, 0],   3), //13
        ([4, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0],  3), //14
        ([4, 3, 2, 7, 11, 15, 0, 0, 0, 0, 0],   8), //15
        ([4, 3, 8, 12, 16, 0, 0, 0, 0, 0, 0],   6), //16
        ([4, 9, 13, 17, 0, 0, 0, 0, 0, 0, 0],   4), //17
        ([4, 10, 14, 18, 0, 0, 0, 0, 0, 0, 0],  4), //18
        ([4, 3, 2, 7, 11, 15, 19, 0, 0, 0, 0],   9), //19
        ([4, 3, 8, 12, 16, 20, 0, 0, 0, 0, 0],   7), //20
        ([4, 9, 13, 17, 21, 0, 0, 0, 0, 0, 0],   5), //21
        ([4, 10, 14, 18, 22, 0, 0, 0, 0, 0, 0],  5), //22
  ],
// 5 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 5
        ([5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0],    1), // 6
        ([5, 4, 3, 2, 7, 0, 0, 0, 0, 0, 0],    8), // 7
        ([5, 4, 3, 8, 0, 0, 0, 0, 0, 0, 0],    6), // 8
        ([5, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 9
        ([5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0],   2), //10
        ([5, 4, 3, 2, 7, 11, 0, 0, 0, 0, 0],   9), //11
        ([5, 4, 3, 8, 12, 0, 0, 0, 0, 0, 0],   7), //12
        ([5, 4, 9, 13, 0, 0, 0, 0, 0, 0, 0],   5), //13
        ([5, 10, 14, 0, 0, 0, 0, 0, 0, 0, 0],  3), //14
        ([5, 4, 3, 2, 7, 11, 15, 0, 0, 0, 0],   10), //15
        ([5, 4, 3, 8, 12, 16, 0, 0, 0, 0, 0],   8), //16
        ([5, 4, 9, 13, 17, 0, 0, 0, 0, 0, 0],   6), //17
        ([5, 10, 14, 18, 0, 0, 0, 0, 0, 0, 0],  4), //18
        ([5, 4, 3, 2, 7, 11, 15, 19, 0, 0, 0],   11), //19
        ([5, 4, 3, 8, 12, 16, 20, 0, 0, 0, 0],   9), //20
        ([5, 4, 9, 13, 17, 21, 0, 0, 0, 0, 0],   7), //21
        ([5, 10, 14, 18, 22, 0, 0, 0, 0, 0, 0],  5), //22
  ],
// 6 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 6
        ([6, 5, 4, 3, 2, 7, 0, 0, 0, 0, 0],    9), // 7
        ([6, 5, 4, 3, 8, 0, 0, 0, 0, 0, 0],    7), // 8
        ([6, 5, 4, 9, 0, 0, 0, 0, 0, 0, 0],    5), // 9
        ([6, 5, 10, 0, 0, 0, 0, 0, 0, 0, 0],   3), //10
        ([6, 5, 4, 3, 2, 7, 11, 0, 0, 0, 0],   10),//11
        ([6, 5, 4, 3, 8, 12, 0, 0, 0, 0, 0],   8), //12
        ([6, 5, 4, 9, 13, 0, 0, 0, 0, 0, 0],   6), //13
        ([6, 5, 10, 14, 0, 0, 0, 0, 0, 0, 0],  4), //14
        ([6, 5, 4, 3, 2, 7, 11, 15, 0, 0, 0],   11),//15
        ([6, 5, 4, 3, 8, 12, 16, 0, 0, 0, 0],   9), //16
        ([6, 5, 4, 9, 13, 17, 0, 0, 0, 0, 0],   7), //17
        ([6, 5, 10, 14, 18, 0, 0, 0, 0, 0, 0],  5), //18
        ([6, 5, 4, 3, 2, 7, 11, 15, 19, 0, 0],   12),//19
        ([6, 5, 4, 3, 8, 12, 16, 20, 0, 0, 0],   10), //20
        ([6, 5, 4, 9, 13, 17, 21, 0, 0, 0, 0],   8), //21
        ([6, 5, 10, 14, 18, 22, 0, 0, 0, 0, 0],  6), //22
  ],
// 7 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 7
        ([7, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 8
        ([7, 2, 3, 9, 0, 0, 0, 0, 0, 0, 0],    6), // 9
        ([7, 2, 3, 4, 10, 0, 0, 0, 0, 0, 0],   8), //10
        ([7, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0],   1), //11
        ([7, 2, 8, 12, 0, 0, 0, 0, 0, 0, 0],   5), //12
        ([7, 2, 3, 9, 13, 0, 0, 0, 0, 0, 0],   7), //13
        ([7, 2, 3, 4, 10, 14, 0, 0, 0, 0, 0],  9), //14
        ([7, 11, 15, 0, 0, 0, 0, 0, 0, 0, 0],   2), //15
        ([7, 2, 8, 12, 16, 0, 0, 0, 0, 0, 0],   6), //16
        ([7, 2, 3, 9, 13, 17, 0, 0, 0, 0, 0],   8), //17
        ([7, 2, 3, 4, 10, 14, 18, 0, 0, 0, 0],  10), //18
        ([7, 11, 15, 19, 0, 0, 0, 0, 0, 0, 0],   3), //19
        ([7, 2, 8, 12, 16, 20, 0, 0, 0, 0, 0],   7), //20
        ([7, 2, 3, 9, 13, 17, 21, 0, 0, 0, 0],   9), //21
        ([7, 2, 3, 4, 10, 14, 18, 22, 0, 0, 0],  11), //22
  ],
// 8 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 8
        ([8, 3, 9, 0, 0, 0, 0, 0, 0, 0, 0],    4), // 9
        ([8, 3, 4, 10, 0, 0, 0, 0, 0, 0, 0],   6), //10
        ([8, 2, 7, 11, 0, 0, 0, 0, 0, 0, 0],   5), //11
        ([8, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0],   1), //12
        ([8, 3, 9, 13, 0, 0, 0, 0, 0, 0, 0],   5), //13
        ([8, 3, 4, 10, 14, 0, 0, 0, 0, 0, 0],  7), //14
        ([8, 2, 7, 11, 15, 0, 0, 0, 0, 0, 0],   6), //15
        ([8, 12, 16, 0, 0, 0, 0, 0, 0, 0, 0],   2), //16
        ([8, 3, 9, 13, 17, 0, 0, 0, 0, 0, 0],   6), //17
        ([8, 3, 4, 10, 14, 18, 0, 0, 0, 0, 0],  8), //18
        ([8, 2, 7, 11, 15, 19, 0, 0, 0, 0, 0],   7), //19
        ([8, 12, 16, 20, 0, 0, 0, 0, 0, 0, 0],   3), //20
        ([8, 3, 9, 13, 17, 21, 0, 0, 0, 0, 0],   7), //21
        ([8, 3, 4, 10, 14, 18, 22, 0, 0, 0, 0],  9), //22
  ],
// 9 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],    0), //dummy 9
        ([9, 4, 10, 0, 0, 0, 0, 0, 0, 0, 0],   4), //10
        ([9, 3, 2, 7, 11, 0, 0, 0, 0, 0, 0],   7), //11
        ([9, 3, 8, 12, 0, 0, 0, 0, 0, 0, 0],   5), //12
        ([9, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0],   1), //13
        ([9, 4, 10, 14, 0, 0, 0, 0, 0, 0, 0],  5), //14
        ([9, 3, 2, 7, 11, 15, 0, 0, 0, 0, 0],   8), //15
        ([9, 3, 8, 12, 16, 0, 0, 0, 0, 0, 0],   6), //16
        ([9, 13, 17, 0, 0, 0, 0, 0, 0, 0, 0],   2), //17
        ([9, 4, 10, 14, 18, 0, 0, 0, 0, 0, 0],  6), //18
        ([9, 3, 2, 7, 11, 15, 19, 0, 0, 0, 0],   9), //19
        ([9, 3, 8, 12, 16, 20, 0, 0, 0, 0, 0],   7), //20
        ([9, 13, 17, 21, 0, 0, 0, 0, 0, 0, 0],   3), //21
        ([9, 4, 10, 14, 18, 22, 0, 0, 0, 0, 0],  7), //22
  ],
// 10 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([10, 4, 3, 2, 7, 11, 0, 0, 0, 0, 0],   9), //11
        ([10, 4, 3, 8, 12, 0, 0, 0, 0, 0, 0],   7), //12
        ([10, 4, 9, 13, 0, 0, 0, 0, 0, 0, 0],   5), //13
        ([10, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0],   1), //14
        ([10, 4, 3, 2, 7, 11, 15, 0, 0, 0, 0],   10), //15
        ([10, 4, 3, 8, 12, 16, 0, 0, 0, 0, 0],   8), //16
        ([10, 4, 9, 13, 17, 0, 0, 0, 0, 0, 0],   6), //17
        ([10, 14, 18, 0, 0, 0, 0, 0, 0, 0, 0],   2), //18
        ([10, 4, 3, 2, 7, 11, 15, 19, 0, 0, 0],   11), //19
        ([10, 4, 3, 8, 12, 16, 20, 0, 0, 0, 0],   9), //20
        ([10, 4, 9, 13, 17, 21, 0, 0, 0, 0, 0],   7), //21
        ([10, 14, 18, 22, 0, 0, 0, 0, 0, 0, 0],   3), //22
   ],
// 11 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
        ([11, 7, 2, 8, 12, 0, 0, 0, 0, 0, 0],   6), //12
        ([11, 7, 2, 3, 9, 13, 0, 0, 0, 0, 0],   8), //13
        ([11, 7, 2, 3, 4, 10, 14, 0, 0, 0, 0],  10),//14
        ([11, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0],     1), //15
        ([11, 7, 2, 8, 12, 16, 0, 0, 0, 0, 0],   7), //16
        ([11, 7, 2, 3, 9, 13, 17, 0, 0, 0, 0],   9), //17
        ([11, 7, 2, 3, 4, 10, 14, 18, 0, 0, 0],  11),//18
        ([11, 15, 19, 0, 0, 0, 0, 0, 0, 0, 0],     2), //19
        ([11, 7, 2, 8, 12, 16, 20, 0, 0, 0, 0],   8), //20
        ([11, 7, 2, 3, 9, 13, 17, 21, 0, 0, 0],   10), //21
        ([11, 7, 2, 3, 4, 10, 14, 18, 22, 0, 0],  12),//22
  ],
// 12 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
        ([12, 8, 3, 9, 13, 0, 0, 0, 0, 0, 0],   6), //13
        ([12, 8, 3, 4, 10, 14, 0, 0, 0, 0, 0],  8), //14
        ([12, 8, 2, 7, 11, 15, 0, 0, 0, 0, 0],     7), //15
        ([12, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0],     1), //16
        ([12, 8, 3, 9, 13, 17, 0, 0, 0, 0, 0],   7), //17
        ([12, 8, 3, 4, 10, 14, 18, 0, 0, 0, 0],  9), //18
        ([12, 8, 2, 7, 11, 15, 19, 0, 0, 0, 0],     8), //19
        ([12, 16, 20, 0, 0, 0, 0, 0, 0, 0, 0],     2), //20
        ([12, 8, 3, 9, 13, 17, 21, 0, 0, 0, 0],   8), //21
        ([12, 8, 3, 4, 10, 14, 18, 22, 0, 0, 0],  10), //22
  ],
// 13 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
        ([13, 9, 4, 10, 14, 0, 0, 0, 0, 0, 0],  6), //14
        ([13, 9, 3, 2, 7, 11, 15, 0, 0, 0, 0],     9), //15
        ([13, 9, 3, 8, 12, 16, 0, 0, 0, 0, 0],     7), //16
        ([13, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0],     1), //17
        ([13, 9, 4, 10, 14, 18, 0, 0, 0, 0, 0],  7), //18
        ([13, 9, 3, 2, 7, 11, 15, 19, 0, 0, 0],     10), //19
        ([13, 9, 3, 8, 12, 16, 20, 0, 0, 0, 0],     8), //20
        ([13, 17, 21, 0, 0, 0, 0, 0, 0, 0, 0],     2), //21
        ([13, 9, 4, 10, 14, 18, 22, 0, 0, 0, 0],  8), //22
  ],
// 14 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
        ([14, 10, 4, 3, 2, 7, 11, 15, 0, 0, 0],   11), //15
        ([14, 10, 4, 3, 8, 12, 16, 0, 0, 0, 0],   9), //16
        ([14, 10, 4, 9, 13, 17, 0, 0, 0, 0, 0],   7), //17
        ([14, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0],   1), //18
        ([14, 10, 4, 3, 2, 7, 11, 15, 19, 0, 0],   12), //19
        ([14, 10, 4, 3, 8, 12, 16, 20, 0, 0, 0],   10), //20
        ([14, 10, 4, 9, 13, 17, 21, 0, 0, 0, 0],   8), //21
        ([14, 18, 22, 0, 0, 0, 0, 0, 0, 0, 0],   2), //22
   ],
// 15 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 15
        ([15, 11, 7, 2, 8, 12, 16, 0, 0, 0, 0],   8), //16
        ([15, 11, 7, 2, 3, 9, 13, 17, 0, 0, 0],   10), //17
        ([15, 11, 7, 2, 3, 4, 10, 14, 18, 0, 0],  12),//18
        ([15, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0],     1), //19
        ([15, 11, 7, 2, 8, 12, 16, 20, 0, 0, 0],   9), //20
        ([15, 11, 7, 2, 3, 9, 13, 17, 21, 0, 0],   11), //21
        ([15, 11, 7, 2, 3, 4, 10, 14, 18, 22, 0],  13),//22
  ],
// 16 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 15
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 16
        ([16, 12, 8, 3, 9, 13, 17, 0, 0, 0, 0],   8), //17
        ([16, 12, 8, 3, 4, 10, 14, 18, 0, 0, 0],  10), //18
        ([16, 12, 8, 2, 7, 11, 15, 19, 0, 0, 0],     9), //19
        ([16, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0],     1), //20
        ([16, 12, 8, 3, 9, 13, 17, 21, 0, 0, 0],   9), //21
        ([16, 12, 8, 3, 4, 10, 14, 18, 22, 0, 0],  11), //22
  ],
// 17 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 15
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 16
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 17
        ([13, 9, 4, 10, 14, 18, 0, 0, 0, 0, 0],  8), //18
        ([17, 13, 9, 3, 2, 7, 11, 15, 19, 0, 0],     11), //19
        ([17, 13, 9, 3, 8, 12, 16, 20, 0, 0, 0],     9), //20
        ([17, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0],     1), //21
        ([17, 13, 9, 4, 10, 14, 18, 22, 0, 0, 0],  9), //22
  ],
// 18 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 15
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 16
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 17
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 18
        ([18, 14, 10, 4, 3, 2, 7, 11, 15, 19, 0],   13), //19
        ([18, 14, 10, 4, 3, 8, 12, 16, 20, 0, 0],   11), //20
        ([18, 14, 10, 4, 9, 13, 17, 21, 0, 0, 0],   9), //21
        ([18, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0],   1), //22
   ],
// 19 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 15
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 16
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 17
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 18
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 19
        ([19, 15, 11, 7, 2, 8, 12, 16, 20, 0, 0],   10), //20
        ([19, 15, 11, 7, 2, 3, 9, 13, 17, 21, 0],   12), //21
        ([19, 15, 11, 7, 2, 3, 4, 10, 14, 18, 22],  14),//22
  ],
// 20 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 15
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 16
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 17
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 18
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 19
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 20
        ([20, 16, 12, 8, 3, 9, 13, 17, 21, 0, 0],   10), //21
        ([20, 12, 8, 3, 4, 10, 14, 18, 22, 0, 0],  12), //22
  ],
// 21 to
    [ //  path                 dist
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 0
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 1
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 2
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 3
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 4
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 5
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 6
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 7
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 8
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 9
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 10
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 11
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 12
        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 13
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 14
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 15
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 16
         ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 17
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 18
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 19
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 20
          ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     0), //dummy 21
        ([21, 17, 13, 9, 4, 10, 14, 18, 22, 0, 0],  10), //22
  ],
];

const HOME: [[usize; 4]; 4] = [
    [19, 15, 11, 7],
    [20, 16, 12, 8],
    [21, 17, 13, 9],
    [22, 18, 14, 10],
];

#[derive(Clone, PartialEq, Eq, Hash)]
struct Amphi {
    variant: char,
    pos: usize,
    cost: usize,
    moves: usize,
}

impl Amphi {
    fn get_cost(variant: char) -> usize {
        match variant {
            'A' => 1,
            'B' => 10,
            'C' => 100,
            'D' => 1000,
            _ => panic!("Invalid amphipod type"),
        }
    }

    fn get_home(&self) -> &[usize; 4] {
        match self.variant {
            'A' => &HOME[0],
            'B' => &HOME[1],
            'C' => &HOME[2],
            'D' => &HOME[3],
            _ => panic!("Invalid amphipod type"),
        }
    }

    fn is_home(&self, game: &Game) -> bool {
        // get_home() starts at bottom of burrow - and we'll fill from the bottom
        for spot in self.get_home().iter() {
            if game.map[*spot] != self.variant {
                return false;
            }
            if *spot == self.pos {
                return true;
            }
        }

        false
    }
}

#[derive(Clone)]
struct Game {
    map: [char; 23],
    amphis: Vec<Amphi>,
    min_cost: Option<usize>,
    cost_so_far: usize,
}

impl Game {
    pub fn new() -> Self {
        Game {
            map: ['.'; 23],
            amphis: Vec::new(),
            min_cost: None,
            cost_so_far: 0,
        }
    }

    pub fn print(&self) {
        println!("{}{}.{}.{}.{}.{}{}", self.map[0], self.map[1], self.map[2],
                                       self.map[3], self.map[4], self.map[5],
                                       self.map[6]);
        println!("  {} {} {} {}", self.map[7], self.map[8], self.map[9], self.map[10]);
        println!("  {} {} {} {}", self.map[11], self.map[12], self.map[13], self.map[14]);
        println!("  {} {} {} {}", self.map[15], self.map[16], self.map[17], self.map[18]);
        println!("  {} {} {} {}", self.map[19], self.map[20], self.map[21], self.map[22]);
        println!("min cost      : {:?}", self.min_cost);
        println!("cost so far   : {}", self.cost_so_far);
    }

    // check if path is clear and return number of steps
    // modified so I don't trip over myself
    fn get_path(&self, f: usize, t: usize, my_pos: usize) -> Option<usize> {
        if f == t {return None;}

        let (from, to) =
            if f > t {
                (t, f)
            } else {
                (f, t)
            };

        let (path, dist) = &PATHS[from][to];

        for (idx, step) in path.iter().enumerate() {
            if *step == my_pos {
                continue;
            }

            if *step == 0 && idx != 0 {
                break;
            }
            if self.map[*step] != '.' {
                return None;
            }
        }

        Some(*dist)
    }

    fn way_home(&self, amp: &Amphi) -> Option<(usize, usize)> { // final pos and num steps
        // get home starts with bottom spot, so this checks from the bottom
        // of the burrow
        for spot in amp.get_home().iter() {
            if self.map[*spot] == '.' {
                if let Some(steps) = self.get_path(amp.pos, *spot, amp.pos) {
                    return Some((*spot, steps));
                } else {
                    return None;
                }
            }
            if self.map[*spot] != amp.variant {
                return None;
            }
        }

        None
    }

    // Just using the amphi list as the cache key doesn't work - might look
    // at fixing later
    pub fn cache_play(&self, level: usize, cache: &mut HashMap<Vec<Amphi>, Option<usize>>) -> Option<usize> {
//        if let Some(result) = cache.get(&self.amphis) {
//            return *result;
//        }

//        let new_result = self.play(level, cache);
        self.play(level, cache)

//        cache.insert(self.amphis.clone(), new_result.clone());

//        new_result
    }

    pub fn play(&self, level: usize, cache: &mut HashMap<Vec<Amphi>, Option<usize>>) -> Option<usize> {

        // If we've already spent more than the target, abandon
        if let Some(min_c) = self.min_cost {
            if self.cost_so_far >= min_c {
                return None;
            }
        }


        // Check to see if all done
        let mut all_home = true;
        for amphi in self.amphis.iter() {
            all_home = all_home && amphi.is_home(&self);
        }

        if all_home {
            return Some(self.cost_so_far);
        }


        // try to make first move for each amphi on the map
        // move following thos one is handles by recursion
        let mut min_cost = self.min_cost;

        'amphi_loop: for (idx, amphi) in self.amphis.iter().enumerate() {

            if level == 0 {
                println!("{} - {:?}", idx, min_cost);
            }

            // check if finished moving
            if amphi.moves == 2 {
                continue 'amphi_loop;
            }

            // recreate starting point for each openning move
            // need to carry over the latest min cost
            let mut next_round = self.clone();
            next_round.min_cost = min_cost;
            let mut new_amphi = amphi.clone();

            // Can we move to home burrow .. or did we start there?
            if amphi.is_home(&next_round) {
                    new_amphi.moves = 2;
                    // OK to store this in the working copy as we don't want to re-test every time
                    next_round.amphis[idx] = new_amphi;

                    if let Some(cost) = next_round.cache_play(level + 1, cache) {
                        if let Some(min_c) = min_cost {
                            if cost < min_c {
                                min_cost = Some(cost);
                            }
                        } else {
                            min_cost = Some(cost);
                        }
                    }

                    continue 'amphi_loop;
                }

            if let Some((home_pos, home_steps)) = next_round.way_home(&amphi) {
                next_round.cost_so_far += home_steps * amphi.cost;
                new_amphi.pos = home_pos;
                new_amphi.moves = 2;
                next_round.amphis[idx] = new_amphi;
                next_round.map[amphi.pos] = '.';
                next_round.map[home_pos] = amphi.variant;

                if let Some(cost) = next_round.cache_play(level + 1, cache) {
                    if let Some(min_c) = min_cost {
                        if cost < min_c {
                            min_cost = Some(cost);
                        }
                    } else {
                        min_cost = Some(cost);
                    }
                }

                continue 'amphi_loop;
            }

            // If we alreday moved once, and now can't move home, we have to wait
            if amphi.moves == 1 {
                continue 'amphi_loop;
            }

            // The hard bit - test moving to each of the available top spaces
            for destination in 0..=6 {
                let mut new_next_round = next_round.clone();
                new_next_round.min_cost = min_cost;
                let mut second_new_amphi = amphi.clone();

                if let Some(steps) = new_next_round.get_path(amphi.pos, destination, amphi.pos) {
                    new_next_round.cost_so_far += steps * amphi.cost;
                    second_new_amphi.pos = destination;
                    second_new_amphi.moves = 1;
                    new_next_round.amphis[idx] = second_new_amphi.clone();
                    new_next_round.map[amphi.pos] = '.';
                    new_next_round.map[destination] = amphi.variant;

                    if let Some(cost) = new_next_round.cache_play(level + 1, cache) {
                        if let Some(min_c) = min_cost {
                        if cost < min_c {
                            min_cost = Some(cost);
                        }
                        } else {
                            min_cost = Some(cost);
                        }
                    }
                }
            }

        }

        min_cost
    }
}

fn main() {
    let data_string = fs::read_to_string("input.txt").expect("Can't open file");

    let mut line = data_string.lines();
    line.next().unwrap();
    line.next().unwrap();

    let mut game = Game::new();
    let mut amphi_pos = 7;

    for _ in 0..4 {
        let mut c_iter = line.next().unwrap().chars();
        for i in [3, 1, 1, 1].iter() {

            let c = c_iter.nth(*i).unwrap();
            if c < 'A' || c > 'D' {
                panic!("Invalid amphipod type");
            }

            game.amphis.push(
                Amphi {
                    variant: c,
                    pos: amphi_pos,
                    cost: Amphi::get_cost(c),
                    moves: 0,
                }
            );

            game.map[amphi_pos] = c;
            amphi_pos += 1;
        }
    }

    game.print();

    let mut cache: HashMap<Vec<Amphi>, Option<usize>> = HashMap::new();
    println!("Minimum energy is {}", game.cache_play(0, &mut cache).unwrap());
}
